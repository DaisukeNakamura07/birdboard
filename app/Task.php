<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use App\Project;

class Task extends Model
{	
    use RecordsActivity;
	/**
	* Attributes to guard against mass assignment.
	*
	* @var array
	*/	
    protected $guarded = [];
    protected $touches = ['project']; // this affects the belongs-to relation 'project' so that the parent project coresponds to the task's updated timestamps.
    protected $casts = [
        'completed' => 'boolean' //0 or 1 => false or true
    ];
    protected static $recordableEvents = ['created', 'deleted'];

    // public $old = [];

    // protected static function boot() //observerを使わずにイベント処理を行う方法。static::created(function(){})でtaskが生成された時のアクションを指定。
    // {
    //     parent::boot(); // TODO: Change the autogenerated stub

    //     static::created(function($task){ // Model Event
    //         $task->project->recordActivity('created_task');
    //     //     Activity::create([
    //     //         'project_id' => $task->project->id,
    //     //         'description' => 'created_task'
    //     //     ]);
    //     });

    //         // Activity::create([
    //         //     'project_id' => $task->project->id,
    //         //     'description' => 'completed_task'
    //         // ]);

    //     static::deleted(function($task){
    //         $task->project->recordActivity('deleted_task');
    //     });
    // }

    public function complete()
    {
        $this->update(['completed' => true]);
        $this->recordActivity('completed_task');
    }

    public function incomplete()
    {
        $this->update(['completed' => false]);
        $this->recordActivity('incompleted_task');
    }
    
    /**
    * Get the owning Project.
    * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
    */
    public function project()
    {
    	return $this->belongsTo(Project::class);
    }

    /**
    * Get the path to the task
    *
    * @return string
	*/
    public function path()
    {
    	return "/projects/{$this->project->id}/tasks/{$this->id}";
    }

    // public function activity()
    // {
    //     return $this->morphMany(Activity::class, 'subject')->latest();//hasManyでは1つのtaskが複数のactivityを持つ。morphManyはその1つのtaskが色々な種類に変化する場合（ここではsubject）に用いる。
    // }

    // public function recordActivity($description)
    // {
    //     $this->activity()->create([
    //         'description' => $description,
    //         'changes' => $this->activityChanges(),
    //         'project_id' => class_basename($this) === 'Project' ? $this->id : $this->project_id
    //     ]); 
    // }

}
